# -*- coding: utf-8 -*-
"""ATM_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P_1VIbGMgnMVN9pzrGQfdc3m9-ulRlod

# ATM Project (Python, No OOP)

A simple ATM simulation project written in Python, using only **functions and global variables** (no Object-Oriented Programming).

## Features

- **User Authentication:**  
  User enters a PIN (default: `1234`). Up to 3 attempts are allowed.

- **Balance Inquiry:**  
  Displays the current account balance.

- **Deposit:**  
  User can deposit money. Validates positive amounts and updates balance.

- **Withdraw:**  
  User can withdraw money if sufficient funds are available.

- **Mini Statement:**  
  Shows the last 5 transactions (deposits/withdrawals).

- **Exit:**  
  Ends the ATM session safely.

## How It Works

- When you run the notebook, it will prompt you for your PIN.
- After successful authentication, youâ€™ll see a menu of actions.
- The account starts with a balance of `$1000`.
- Each deposit or withdrawal is logged in a transaction list.
- The program uses simple `input()`/`print()` statements for interaction.


## Notes

- This project does not use OOP or persistent storage (all data resets when restarted).
- Designed for educational purposes and as a beginner Python project template.

# 1. Defaults
"""

PIN = "1234"                # Default user PIN
balance = 1000.0            # Default account balance (USD)
transactions = []           # List to store last transactions

"""
## 2. Authentication Function

This function asks the user to input the PIN.  
- The user gets 3 tries.
- On correct PIN, the user is authenticated.
- On 3 wrong tries, the program exits.
"""

def authenticate():
    attempts = 0
    while attempts < 3:
      UIN=input("Please enter the 4 digits PIN code \n")
      if len(UIN)!=len(PIN):
        print("Invalid PIN ")
        attempts +=1
      else:
        if UIN == PIN:
          return True
        else:
          attempts +=1
    return False

"""
## 3. Show ATM Menu

Prints the available options for the user.
"""

def show_menu():
    return input("Welcome to ATM. Please choose one of the following options: \n 1. Balance Inquiry \n 2. Deposit \n 3. Withdraw \n 4. Mini Statement \n 5. Exit \n")

"""
## 4. Balance Inquiry

Displays the user's current balance.
"""

def balance_inquiry():
    print(f"Your current balanse is {balance:.2f}$ \n")
    reutrn()

"""
## 5. Deposit Money

Lets the user add money to their balance.  
- The amount is validated.
- The transaction is recorded.
"""

def deposit():
    global balance
    try:
      deposit = float(input("Please enter the amount you want to deposit \n"))
      if deposit<=0:
        print("Invalid amount")
        show_menu()
      else:
        balance += deposit
        print(f"you successfully deposited {deposit:.2f}$ from your account \n your total balance is {balance:.2f}$")
        transactions.append(f"Deposit: {deposit:.2f}$")
        reutrn()
    except:
      print("Invalid Input. Please try again")
      show_menu()

"""
## 6. Withdraw Money

Lets the user withdraw money if the balance is sufficient.  
- The withdrawal is validated.
- The transaction is recorded.
"""

def withdraw():
    global balance
    try:
      withdraw = float(input("Please enter the amount you want to withdraw \n"))
      if balance!= 0 or withdraw<=balance:
        balance -= withdraw
        print(f"you successfully withdrew {withdraw:.2f}$ from your account  \n your total balance is {balance:.2f}$")
        transactions.append(f"Withdraw: {withdraw:.2f}$")
        reutrn()
      else:
        print("Insufficient amount")
        show_menu()
    except:
      print("Invalid Input. Please try again")
      show_menu()

"""
## 7. Mini Statement

Displays the last 5 transactions.
"""

def mini_statement():
    print("Your last 5 transactions:")
    if transactions:
      for _ in transactions[:5]:
        print(_)
        reutrn()
    else:
      print("No transactions found")
      reutrn()

"""## 8. Reutrn/Exit Option
Gives the user the ability to either return to main menu or exit the program
"""

def reutrn():
  try:
    match int(input("\n Please Choose \n 1.Return to Main Menu \n 2.Exit \n")):
      case 1:
        return operation()
      case 2:
        print("Thank you for chooseing ATM. GoodBye")
      case _:
        print("invalid option")
        reutrn()
  except:
    print("Invalid Input. Please try again")

"""
## 9. Main Program Loop

Handles the full ATM workflow:  
- Authenticates the user  
- Shows the menu in a loop  
- Calls the correct function for each option  
- Exits on user request
"""

def operation():
  operation=show_menu()
  match operation:
    case "1":
      balance_inquiry()
    case "2":
      deposit()
    case "3":
      withdraw()
    case "4":
      mini_statement()
    case "5":
      print("Thank you for chooseing ATM. GoodBye")
    case _:
      print("invalid option")
      show_menu()

def main():
  if authenticate():
    operation()
  else: print("Authentication failed. Exiting.")

"""
## 10. Run the ATM Program

Execute this cell to start the ATM session.
"""

main()